/*----------------------------------------------------------------------------*/
/*Dept. of Informatics & Telecommunications			    5/3/2011  */
/*National and Kapodistrian University of Athens			      */
/*									      */
/*4th Exercise in Operating Systems (K-22)				      */
/*							                      */
/*Spyridon Smparounis (200800138) / std08138@di.uoa.gr			      */
/*George Papakiriakopoulos (200800148) / std08148@di.uoa.gr		      */
/*----------------------------------------------------------------------------*/
/*README								      */
/*----------------------------------------------------------------------------*/

######################################################
Subversion repository for the project can be found at:
http://code.google.com/p/dellis-4/
######################################################

Purpose of the Project : The purpose of this project is to implement an application that will mirror and monitor a hierarchy of 
			 folders and files contained in a root folder in two ways :
			 
			 1) First, an initial sync is performed that mirrors everything inside the source folder to a folder specified as target.
          It is imperative that no files or folders are altered in any way during the initial sync.
			 2) When the program completes the initial sync, it begins actively monitoring the root folder and everything in it
          for any kind of file or folder structure modification, updating the target (backup) folder as required.

Source files making up the project :
			
			Source : objects.cpp/.h --> Contains the implementation of class functions needed for the project.
				 rw_functions.cpp/.h --> Contains the implementation of functions responsible for reading/writing
						      on the file system as required then updating the internal hierarchy structure.
				 notificationMonitor.cpp/.h --> Contains the implementation of functions responsible for performing the
							     initial sync as well as the handling of active monitor events.
				 mirror.cpp/.h --> Execution entry point.
				 generalHeaders.h --> Contains all the standard headers needed for the project collected to avoid dual
						      inclusion of any header.

Program Compilation : The program is written in C++ using STL classes; g++ is suggested for compilation. The
         standard makefile we provide makes use of g++, and the make/make all/make mirror commands all result in
         generating the final executable. make clean cleans up the compilation products, and make dist constructs
         the appropriate tarball for exercise submission.

Program Execution : The program requires two arguments to execute properly in the following form :
		    ./mirror <source_folder> <target_folder>
		    <source_folder> : the path of the source folder, relative to the user's current location.
		    <target_folder> : the path of the target folder, relative to the user's current location.
        Both folders must exist, else the program will abort execution upon startup.

Events monitored by the application :
		    File and Folder creation --> Inside the source_folder or any subfolder of any depth.
		    File and Folder deletion --> Same rules as the creation.
	    	    File and Folder movement --> 3 types of movement supported in any depth of the hierarchy :
						 1) movement between locations inside the monitored hierarchy. Renames of any kind are also processed.
						 2) movement of a file or folder inside the hierarchy to a location outside it (same as deletion)
						 3) movement of a file or folder from a location outside the hierarchy to a location inside it
						   (same as creation).
		    File and Folder modification --> Modification of file data or folder contents.
		    File and Folder attribute change --> Modification of attributes such as permission rights, last changed date, name etc.

Known issues: the structures monitored may not contain any kind of file considered "non-standard" by inotify (i.e. FIFO pipes,
              device endpoints, aliases, sockets, et al). Currently, there is no workaround, and it is the user's responsibility
              to ensure that the structure monitored has no such entities in it; otherwise, safe and stable program execution can
              not be guaranteed.

Project version : 0.1a(r104)
